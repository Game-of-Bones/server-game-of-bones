// src/scripts/init-db.ts
/**
 * SCRIPT DE INICIALIZACI√ìN COMPLETA DE LA BASE DE DATOS
 *
 * Este script:
 * 1. Crea la base de datos si no existe
 * 2. Sincroniza los modelos (crea tablas)
 * 3. Ejecuta los seeders
 *
 * Uso: npm run db:init
 */

import 'reflect-metadata';
import dotenv from 'dotenv';
import { Sequelize } from 'sequelize';

// ‚úÖ CR√çTICO: Importar sequelize PRIMERO
import sequelize from '../database/database';

// ‚úÖ IMPORTANTE: Importar TODOS los modelos para que se registren
import { User } from '../models/User';
import Fossil from '../models/GobModelPost';
import { Comment } from '../models/Comment';
import { Like } from '../models/Like';

// ‚úÖ Luego importar los seeders
import { seedUsers } from '../database/seeders/01-users';
import { seedFossils } from '../database/seeders/02-fossils';
import { seedComments } from '../database/seeders/03-comments';

dotenv.config();

const initDatabase = async () => {
  const isTest = process.env.NODE_ENV === 'test';
  const dbName = isTest
    ? (process.env.DB_TEST_NAME || 'game_of_bones_app_test')
    : (process.env.DB_NAME || 'game_of_bones_app');

  console.log('\nü¶¥ ========================================');
  console.log('GAME OF BONES - INICIALIZACI√ìN DE BD');
  console.log('========================================\n');
  console.log(`üìä Base de datos: ${dbName}`);
  console.log(`üåç Entorno: ${process.env.NODE_ENV || 'development'}\n`);

  try {
    // ============================================
    // PASO 1: CREAR BASE DE DATOS SI NO EXISTE
    // ============================================
    console.log('üì¶ Paso 1: Verificando/creando base de datos...');

    const rootConnection = new Sequelize({
      host: isTest
        ? (process.env.DB_TEST_HOST || process.env.DB_HOST || 'localhost')
        : (process.env.DB_HOST || 'localhost'),
      port: isTest
        ? parseInt(process.env.DB_TEST_PORT || process.env.DB_PORT || '3306')
        : parseInt(process.env.DB_PORT || '3306'),
      username: isTest
        ? (process.env.DB_TEST_USER || process.env.DB_USER || 'root')
        : (process.env.DB_USER || 'root'),
      password: isTest
        ? (process.env.DB_TEST_PASSWORD || process.env.DB_PASSWORD || '')
        : (process.env.DB_PASSWORD || ''),
      dialect: 'mysql',
      logging: false
    });

    await rootConnection.authenticate();
    console.log('‚úÖ Conectado al servidor MySQL\n');

    // Crear base de datos si no existe
    await rootConnection.query(
      `CREATE DATABASE IF NOT EXISTS \`${dbName}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;`
    );
    console.log(`‚úÖ Base de datos '${dbName}' verificada/creada\n`);

    await rootConnection.close();

    // ============================================
    // PASO 2: CONECTAR Y SINCRONIZAR MODELOS
    // ============================================
    console.log('üì¶ Paso 2: Conectando a la base de datos...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n establecida\n');

    console.log('üîó Paso 3: Modelos cargados autom√°ticamente v√≠a decoradores\n');

    console.log('üîÑ Paso 4: Sincronizando modelos (creando tablas)...');
    await sequelize.sync({ force: false, alter: true });
    console.log('‚úÖ Tablas sincronizadas\n');

    // ============================================
    // PASO 3: EJECUTAR SEEDERS
    // ============================================
    console.log('üå± Paso 5: Ejecutando seeders...\n');

    console.log('   üìù Seeder 1/3: Usuarios...');
    await seedUsers();

    console.log('   ü¶¥ Seeder 2/3: F√≥siles...');
    await seedFossils();

    console.log('   üí¨ Seeder 3/3: Comentarios...');
    await seedComments();

    console.log('\n========================================');
    console.log('üéâ INICIALIZACI√ìN COMPLETADA');
    console.log('========================================\n');

    console.log('üîê Credenciales de prueba:');
    console.log('   üëë Admin: admin@gameofbones.com / admin123');
    console.log('   üë§ User:  maria@example.com / password123\n');

    console.log('üìö Datos creados:');
    const userCount = await sequelize.models.User.count();
    const fossilCount = await sequelize.models.Fossil.count();
    const commentCount = await sequelize.models.Comment.count();
    console.log(`   üë• Usuarios: ${userCount}`);
    console.log(`   ü¶¥ F√≥siles: ${fossilCount}`);
    console.log(`   üí¨ Comentarios: ${commentCount}\n`);

    console.log('üí° Pr√≥ximos pasos:');
    console.log('   1. npm run dev        - Iniciar servidor');
    console.log('   2. npm test           - Ejecutar tests');
    console.log('   3. http://localhost:3000/health - Health check\n');

    await sequelize.close();
    process.exit(0);

  } catch (error: any) {
    console.error('\n‚ùå ========================================');
    console.error('ERROR EN INICIALIZACI√ìN');
    console.error('========================================');
    console.error(error);
    console.error('========================================\n');

    if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('üí° Verifica las credenciales de MySQL en tu archivo .env');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° Verifica que MySQL est√© corriendo en tu sistema');
    }

    try {
      await sequelize.close();
    } catch (e) {
      // Ignorar error al cerrar
    }

    process.exit(1);
  }
};

// Ejecutar si es llamado directamente
if (require.main === module) {
  initDatabase();
}

export default initDatabase;
